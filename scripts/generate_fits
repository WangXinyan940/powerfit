#! /env/bin/python
import os
from argparse import ArgumentParser
from powerfit import PDB

def parse_args():
    p = ArgumentParser()

    p.add_argument('solutions', type=file)
    p.add_argument('model', type=file)
    p.add_argument('num', type=int, default=10)

    p.add_argument('-c', '--chain', dest='chain', type=str, default=None)
    p.add_argument('-b', '--base', dest='base', type=str, default='fit')
    p.add_argument('-d', '--directory', dest='directory', type=str, default='.')

    return p.parse_args()

def main():

    args = parse_args()


    p = PDB.fromfile(args.model)
    if args.chain is not None:
        p = p.select('chain', args.chain)
        if p.data.size == 0:
            raise ValueError('Chain is not present in file.')
    
    p.coor -= p.center

    outbase = os.path.join(args.directory, args.base + '_{:d}.pdb')
    if not os.path.isdir(args.directory):
        os.mkdir(args.directory)

    for n in range(args.num):

        p2 = p.duplicate()

        line = args.solutions.readline()
        while line.startswith('#'):
            line = args.solutions.readline()

        words = line.split()

        lcc, z, y, x, a11, a12, a13, a21, a22, a23, a31, a32, a33 = [float(x) for x in words]

        p2.rotate([[a11, a12, a13], [a21, a22, a23], [a31, a32, a33]])
        p2.translate([x, y, z])

        p2.tofile(outbase.format(n+1))

if __name__=='__main__':
    main()
