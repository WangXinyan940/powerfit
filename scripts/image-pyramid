# bin/python
# -*- coding: utf-8

from os.path import splitext
from argparse import ArgumentParser
from powerfit import EM

def parse_args():
    p = ArgumentParser()

    p.add_argument('map', type=file, help='Initial density data.')
    p.add_argument('resolution', type=float, help='Resolution of initial data.')

    p.add_argument('-rr', '--resampling-rate', dest='resampling-rate',
        type=float, default=2, help='Nyquist resampling rate. Default is 2 x '
        'Nyquist, i.e. resulting voxelspacing is '
        '1/4th of the resolution.')

    p.add_argument('-b', '--base-name', dest='base-name', type=str, default=None,
        help='Base name of the resulting maps. Default is original mapfile name.')

    p.add_argument('target-resolutions', nargs='+', type=float, help='The '
        'target resolutions of the resulting image-pyramid.')

    args = p.parse_args()

    # some error checking
    if args.resolution <= 0:
        raise ValueError('Resolution should be bigger than 0.')
    if getattr(args, 'resampling-rate') < 1:
        raise ValueError('Resampling rate should be bigger than 1 times Nyquist.')
    for resolution in getattr(args, 'target-resolutions'):
        if resolution < args.resolution:
            raise ValueError('Target resolution of image-pyramid should be '
                'lower than original data.')

    return args


def main():
    args = parse_args()

    # determine the base name
    base = getattr(args, 'base-name')
    if base is None:
        base = splitext(args.map.name)[0] 
    name = base + '_{:.0f}.ccp4'

    # create image-pyramid
    em = EM.fromfile(args.map, args.resolution)
    for resolution in getattr(args, 'target-resolutions'):
        image = em.lower_resolution(resolution - args.resolution)
        image = image.resample(getattr(args, 'resampling-rate'))
        image.tofile(name.format(resolution))


if __name__ == '__main__':
    main()
